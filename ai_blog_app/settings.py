"""
Django settings for ai_blog_app project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see: https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see: https://docs.djangoproject.com/en/5.2/ref/settings/
"""


import os                                       # For the Static, MEDIA_ROOT & Neon Database 
from pathlib import Path
from dotenv import load_dotenv
from urllib.parse import urlparse, parse_qsl    # removed for security
from decouple import config
import dj_database_url


# ---------------------------------------------------------
# BASE DIRECTORIES
# ---------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent


# Load environment variables from .env
load_dotenv()


# ---------------------------------------------------------
# SECURITY
# ---------------------------------------------------------
SECRET_KEY = config("SECRET_KEY", default="django-insecure-placeholder-key")
DEBUG = config("DEBUG", default=False, cast=bool)  # WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="127.0.0.1,localhost").split(",")


# ---------------------------------------------------------
# APPLICATIONS DEFINITION
# ---------------------------------------------------------
INSTALLED_APPS = [
    # Django default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Local apps
    'blog_generator'
]


# ---------------------------------------------------------
# MIDDLEWARE
# ---------------------------------------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


# ---------------------------------------------------------
# URLS & WSGI
# ---------------------------------------------------------
ROOT_URLCONF = 'ai_blog_app.urls'
WSGI_APPLICATION = 'ai_blog_app.wsgi.application'
APPEND_SLASH = True


# ---------------------------------------------------------
# TEMPLATES
# ---------------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],    # project-level templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# ---------------------------------------------------------
# DATABASE
# ---------------------------------------------------------
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL', default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}"),
        conn_max_age=600,
        ssl_require=True
    )
}


# ---------------------------------------------------------
# PASSWORD VALIDATION
# ---------------------------------------------------------
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# ---------------------------------------------------------
# INTERNATIONALIZATION
# ---------------------------------------------------------
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

#'''

# ---------------------------------------------------------
# STATIC & MEDIA FILES with Cloudinary
# ---------------------------------------------------------
INSTALLED_APPS += ["cloudinary","cloudinary_storage"]

CLOUDINARY_STORAGE = {
    "CLOUD_NAME": os.getenv("CLOUDINARY_CLOUD_NAME"),
    "API_KEY": os.getenv("CLOUDINARY_API_KEY"),
    "API_SECRET": os.getenv("CLOUDINARY_API_SECRET"),
}

DEFAUT_FILES_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"
STATICFILES_STORAGE = "cloudinary_storage.storage.StaticHashedCloudinaryStorage"

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

# ---------------------------------------------------------
# CACHE SETTINGS : File-based cache for transcripts & blogs
# ---------------------------------------------------------
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": os.environ.get("REDIS_URL"), # from Render
        "OPTIONS":{
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SSL": True, # because RenderRedis is redis://(TLS)
            "PASSWORD": os.environ.get("REDIS_PASSWORD",""), # optional
        }
    }
}

#'''

'''
# ---------------------------------------------------------
# STATIC & MEDIA FILES
# ---------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]       # Project Level static folder (for development)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')         # collectstatic(production) will put all static files
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# ---------------------------------------------------------
# MEDIA ROOT & URL : Media files (uploads)
# ---------------------------------------------------------
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# ---------------------------------------------------------
# CACHE SETTINGS : File-based cache for transcripts & blogs
# ---------------------------------------------------------
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": os.path.join(BASE_DIR, "django_cache"),  # cache folder
    }
}
'''

# ---------------------------------------------------------
# AUTHENTICATION
# ---------------------------------------------------------
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_URL = 'login'


# ---------------------------------------------------------
# API KEYS
# ---------------------------------------------------------
AAI_API_KEY = config("AAI_API_KEY", default="")
OPENAI_API_KEY = config("OPENAI_API_KEY", default="")
GEMINI_API_KEY = config("GEMINI_API_KEY", default="")
